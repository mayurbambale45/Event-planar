cd backend

npm init -y
npm install express mongoose bcryptjs jsonwebtoken dotenv nodemailer cors
npm install nodemon --save-dev

**********************************************************************************

sql => mysql -u root -p
password:

CREATE DATABASE event_planner;

USE event_planner;

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255),
  email VARCHAR(255) UNIQUE,
  password VARCHAR(255),
  role ENUM('admin', 'user') DEFAULT 'user'
);

CREATE TABLE events (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255),
  date DATE,
  location VARCHAR(255),
  description TEXT
);

CREATE TABLE registrations (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  event_id INT,
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (event_id) REFERENCES events(id)
);


for fontend =>

cd ..
npx create-react-app frontend
cd frontend
npm install axios react-router-dom

create folders and files and add code in it.

for run code =>
backend -> npm run dev
frontend -> npm run dev


********************** GITS METHODS *****************************************

**Steps to push code on New create Repo or Already created Repo using bash**
1. Create a Repo on Git hub
2. copy the url from code -> HTTPS

Type in Terminal :-
git remote add origin <.git url>
git add .
git commit -am "<message>"
git push origin	


***For open git project in VSCode***
1. Open to download zip
2. open using HTTPS link (create folder - open terminal in folder - type git clone <link> - file in folder  - then open with vsCode


***For push code using VSCode on git-hub***
1.  Push using source control in vsCode (add staged changes & push)
2. Using Terminal
      git add .
      git commit - am <msg>
      git push origin


**Open Code of Git repo in codespace (vsCode web)***
.
.
.


***************************************** React questions => *****************************************
******************************************************************************************************
******************************************************************************************************

1. What is React and how does it work?
Answer: React is a JavaScript library used for building user interfaces, primarily single-page applications where the UI is dynamically updated. It allows developers to build components, which are reusable, self-contained pieces of code that define how a UI should look and behave.

React works by updating the virtual DOM (a lightweight copy of the actual DOM) whenever the state of a component changes. React compares the virtual DOM with the actual DOM (a process called "reconciliation") and then only updates the parts of the DOM that have changed, making updates fast and efficient.

2. What are components in React?
Answer: In React, components are the building blocks of the UI. They can be either functional or class-based components.

Functional Components: These are stateless and simpler, written as functions.

javascript
Copy
Edit
function MyComponent() {
  return <div>Hello World</div>;
}
Class Components: These are more complex, have internal state, and are written as ES6 classes.

javascript
Copy
Edit
class MyComponent extends React.Component {
  render() {
    return <div>Hello World</div>;
  }
}
3. What is the difference between state and props in React?
Answer:

State: State is used to manage data within a component that can change over time. When the state changes, React re-renders the component to reflect the new state.

javascript
Copy
Edit
const [count, setCount] = useState(0);
Props: Props (short for properties) are used to pass data from a parent component to a child component. Props are immutable, meaning they cannot be modified by the child component.

javascript
Copy
Edit
<ChildComponent name="John" age={30} />
4. What is JSX in React?
Answer: JSX (JavaScript XML) is a syntax extension that allows you to write HTML-like code in your JavaScript files. JSX is then compiled to JavaScript by React. It makes it easier to describe the UI structure in a declarative way.

Example:

javascript
Copy
Edit
const element = <h1>Hello, world!</h1>;
JSX is not required, but it is commonly used because it simplifies writing UI components in React.

5. Explain the React component lifecycle.
Answer: React components have several lifecycle methods (for class components) or hooks (for functional components) that allow you to hook into different stages of the component's existence.

For class components, these are the main lifecycle methods:

componentDidMount(): Called once the component is mounted.

shouldComponentUpdate(): Determines whether the component should re-render.

componentDidUpdate(): Called after the component re-renders.

componentWillUnmount(): Called before the component is removed from the DOM.

For functional components, hooks like useEffect can be used to replicate lifecycle methods:

javascript
Copy
Edit
useEffect(() => {
  // ComponentDidMount or ComponentDidUpdate
  return () => {
    // ComponentWillUnmount
  };
}, [dependencies]);
6. What is the purpose of the useEffect hook?
Answer: useEffect is used to perform side effects in functional components. Side effects include tasks like data fetching, subscriptions, and manually manipulating the DOM.

It runs after the render and can be controlled by the dependency array, which defines when the effect should run.

Example:

javascript
Copy
Edit
useEffect(() => {
  console.log("Component mounted or updated");
}, [dependency]);
If the dependency array is empty ([]), the effect runs only once (after the first render).

If there are dependencies, the effect runs when those dependencies change.

7. What are React hooks? Name a few commonly used hooks.
Answer: React hooks are functions that allow you to use state and other React features in functional components.

Some commonly used hooks are:

useState: For managing state in functional components.

javascript
Copy
Edit
const [count, setCount] = useState(0);
useEffect: For performing side effects in functional components.

javascript
Copy
Edit
useEffect(() => {
  // Side effect code
}, []);
useContext: For accessing context values in functional components.

javascript
Copy
Edit
const value = useContext(MyContext);
useReducer: For managing more complex state logic.

javascript
Copy
Edit
const [state, dispatch] = useReducer(reducer, initialState);
8. What is the virtual DOM in React?
Answer: The virtual DOM is a lightweight in-memory representation of the actual DOM. React uses it to optimize updates to the UI by first updating the virtual DOM, comparing it with the previous version, and then applying only the necessary changes to the real DOM. This process is known as reconciliation and helps improve the performance of React applications.

9. What is Redux, and how does it work with React?
Answer: Redux is a state management library that provides a centralized store to manage the state of an application. It is often used with React to maintain and manage global state.

The core principles of Redux are:

Single source of truth: The entire application state is stored in a single object (the store).

State is read-only: The only way to change the state is by dispatching actions.

Changes are made with pure functions: Actions are processed by reducers, which are pure functions.

Example of a Redux store:

javascript
Copy
Edit
import { createStore } from 'redux';

const initialState = {
  count: 0
};

const reducer = (state = initialState, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, count: state.count + 1 };
    default:
      return state;
  }
};

const store = createStore(reducer);
10. What is a higher-order component (HOC)?
Answer: A Higher-Order Component (HOC) is a function that takes a component and returns a new component with enhanced functionality. HOCs are used to share common functionality between components without modifying the components themselves.

Example:

javascript
Copy
Edit
const withLoading = (Component) => {
  return function WrappedComponent(props) {
    if (props.isLoading) {
      return <div>Loading...</div>;
    }
    return <Component {...props} />;
  };
};

const MyComponent = ({ data }) => <div>{data}</div>;

export default withLoading(MyComponent);
11. What is the difference between useCallback and useMemo?
Answer:

useCallback: Used to memoize a function. It returns a memoized version of the callback that only changes if one of the dependencies has changed.

javascript
Copy
Edit
const memoizedCallback = useCallback(() => {
  // function code
}, [dependency]);
useMemo: Used to memoize a value (not a function). It returns a memoized value that only recomputes when one of the dependencies changes.

javascript
Copy
Edit
const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);

***************************************** Backend *****************************************
*******************************************************************************************
*******************************************************************************************

1. What is Node.js?
Answer: Node.js is a JavaScript runtime environment that allows you to execute JavaScript code on the server side, outside the browser. It is built on Google Chrome's V8 JavaScript engine and uses an event-driven, non-blocking I/O model, making it lightweight and efficient for building scalable network applications.

Non-blocking I/O: Node.js can handle multiple requests concurrently, without waiting for one request to finish before starting the next.

Single-threaded event loop: Despite being single-threaded, Node.js can handle many requests in parallel due to its event-driven architecture.

2. What is the event loop in Node.js?
Answer: The event loop is a key feature in Node.js that allows it to handle asynchronous operations. It is a single-threaded, non-blocking mechanism that processes events and executes them in a loop. It enables Node.js to handle multiple operations (such as file reads, database queries, etc.) concurrently without blocking the execution thread.

Stages of the Event Loop:
Timers: Executes callbacks from setTimeout() and setInterval().

I/O Callbacks: Executes most of the I/O callbacks, including network requests.

Idle, Prepare: Internal phase for the event loop.

Poll: Retrieves new I/O events, executes I/O-related callbacks.

Check: Executes callbacks for setImmediate().

Close Callbacks: Executes close event callbacks like socket.on('close').

3. What is the difference between require and import in Node.js?
Answer:

require: A CommonJS module system that is synchronous and loads modules in the order in which they are requested. It's the traditional way of including modules in Node.js.

javascript
Copy
Edit
const express = require('express');
import: ES6 module syntax for importing modules. It's asynchronous and supports features like tree-shaking, which can help reduce the size of the final bundle.

javascript
Copy
Edit
import express from 'express';
Note: Node.js fully supports import syntax if you use "type": "module" in package.json or if your code is in .mjs files.

4. What is Express.js?
Answer: Express.js is a lightweight, minimal web application framework built on top of Node.js that simplifies the process of building web applications and APIs. It handles HTTP requests, provides middleware, and simplifies routing and server management.

Common usage:

javascript
Copy
Edit
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello, world!');
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
5. What are Middleware functions in Express.js?
Answer: Middleware functions in Express.js are functions that have access to the request, response, and the next middleware function in the application’s request-response cycle. They are used to handle requests, perform tasks like logging, authentication, validation, etc., and modify the request/response.

Types of Middleware:

Built-in middleware: express.json(), express.static(), etc.

Third-party middleware: Body parsing (body-parser), logging (morgan).

Custom middleware: Your own middleware functions.

Example:

javascript
Copy
Edit
const middleware = (req, res, next) => {
  console.log('Request received!');
  next();  // Passing control to the next middleware
};
app.use(middleware);
6. What are RESTful APIs?
Answer: REST (Representational State Transfer) is an architectural style for building web services. RESTful APIs follow a set of principles for creating networked applications, including:

Stateless: Each request from a client contains all the information needed to process it (no session storage on the server).

Client-Server: The client and server are separate entities; the client sends requests to the server, which processes them and sends back responses.

Use of HTTP Methods: GET (read), POST (create), PUT (update), DELETE (delete).

7. What is the role of JSON Web Tokens (JWT)?
Answer: JWT is an open standard used to securely transmit information between parties as a JSON object. It's typically used for authentication and authorization in web applications.

A typical flow involves:

The client sends credentials (e.g., username/password) to the server.

The server validates the credentials and sends back a JWT.

The client includes this token in subsequent requests to prove their identity.

The server verifies the JWT using a secret key.

Example of a JWT in action:

javascript
Copy
Edit
const jwt = require('jsonwebtoken');
const token = jwt.sign({ id: user.id }, 'secretkey', { expiresIn: '1h' });
8. How does Node.js handle asynchronous programming?
Answer: Node.js handles asynchronous programming through:

Callbacks: Functions that are passed as arguments and are executed once an asynchronous operation completes.

Promises: An object that represents the eventual result of an asynchronous operation.

async/await: A syntactic sugar built on top of promises that makes asynchronous code look synchronous.

Example using async/await:

javascript
Copy
Edit
async function fetchData() {
  const result = await fetch('https://api.example.com/data');
  const data = await result.json();
  console.log(data);
}
9. What is a database connection pool in Node.js?
Answer: A database connection pool is a collection of database connections that are reused to handle multiple requests. Instead of creating a new connection for every query (which can be slow and resource-intensive), the pool keeps a set of open connections, making the process more efficient.

In Node.js, many database libraries (such as pg for PostgreSQL, mysql2 for MySQL) provide connection pooling to improve performance.

Example:

javascript
Copy
Edit
const mysql = require('mysql2');
const pool = mysql.createPool({
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'test',
});

pool.query('SELECT * FROM users', (err, results) => {
  console.log(results);
});
10. What is the difference between SQL and NoSQL databases?
Answer:

SQL Databases: These are relational databases that use Structured Query Language (SQL) to manage data. Data is stored in tables with predefined schemas (e.g., MySQL, PostgreSQL).

Pros: ACID properties (Atomicity, Consistency, Isolation, Durability), strong consistency, suitable for complex queries.

Cons: Not flexible for schema changes, scaling horizontally is harder.

NoSQL Databases: These are non-relational databases that do not use SQL and have a flexible schema (e.g., MongoDB, CouchDB).

Pros: Flexible schema, horizontal scalability, and high availability.

Cons: Lack of ACID transactions, less mature in terms of complex querying.

11. What are some common security practices in Node.js?
Answer:

Input validation and sanitization: Ensure that user inputs are validated and sanitized to prevent SQL injection and cross-site scripting (XSS).

Use HTTPS: Always use SSL/TLS to encrypt data in transit.

Rate Limiting: Prevent brute-force attacks by limiting the number of requests a user can make in a given time frame.

Environment variables: Use environment variables (dotenv) to manage secrets (e.g., database passwords, API keys).

Authentication: Implement strong user authentication (e.g., using JWT or OAuth).

CORS (Cross-Origin Resource Sharing): Configure CORS properly to prevent unauthorized cross-origin requests.

12. What is the difference between app.use() and app.all() in Express.js?
Answer:

app.use(): Used to mount middleware on the app, it is called for all HTTP methods (GET, POST, PUT, DELETE, etc.) on the specified route.

javascript
Copy
Edit
app.use('/path', middlewareFunction);
app.all(): Used to handle all HTTP methods for a specific route. It's usually used when you want to handle all requests to a route.

javascript
Copy
Edit
app.all('/path', (req, res) => {
  res.send('Handled all HTTP methods');
});
These questions should give you a good foundation for preparing for Node.js or backend-related interviews.

Would you like to dive deeper into any of these topics, or need more advanced questions?








